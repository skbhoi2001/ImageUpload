// ? node --watch server -> to avoid nodemon
const express = require("express");
const cors = require("cors");
require("dotenv").config();
const mongoose = require("mongoose");
const multer = require("multer");
const cloudinary = require("cloudinary").v2;
const { CloudinaryStorage } = require("multer-storage-cloudinary");
const PORT = 5000;
const app = express();
app.use(cors());

app.use(
  cors({
    origin: "*", // Allow requests from any origin
  })
);

//! CONNECT TO DB

mongoose
  .connect(
    "mongodb+srv://soumyak:Soumyak_2001@cluster0.d1f22tp.mongodb.net/UPLOAD"
  )
  .then(() => console.log("DB connected"))
  .catch((e) => console.log(e));

//! image schema

const imageSchema = mongoose.Schema(
  {
    url: String,
    public_id: String,
  },
  {
    timestamps: true,
  }
);

const videosSchema = new mongoose.Schema(
  {
    url: String,
    public_id: String,
  },
  {
    timestamps: true,
  }
);

//! Model

const Image = mongoose.model("Image", imageSchema);
const Video = mongoose.model("Video", videosSchema);

//! configure cloudnary

cloudinary.config({
  api_key: process.env.CLOUDNARY_API_KEY,
  cloud_name: process.env.CLOUDNARY_CLOUD_NAME,
  api_secret: process.env.CLOUDNARY_API_SECRET,
});

//!CONFIGURE MULTER STORAGE CLOUD

const imageStorage = new CloudinaryStorage({
  cloudinary,
  params: {
    folder: "images-folder",
    format: async (req, file) => "png",
    public_id: (req, file) => file.fieldname + "_" + Date.now(),
    transformation: [{ width: 800, height: 600, crop: "fill" }],
  },
});

const videoStorage = new CloudinaryStorage({
  cloudinary,
  params: (req, file) => {
    let folder = "video-folder";
    let resource_type = "auto";
    return {
      folder,
      resource_type,
      public_id: file.fieldname + "_" + Date.now(),
    };
  },
});

//! CONFIGURE MULTER

const imageUpload = multer({
  imageStorage,
  limits: 1024 * 1020 * 5,
  fileFilter: function (req, file, cb) {
    if (file.mimetype.startsWith("image/")) {
      cb(null, true);
    } else {
      cb(new Error("Not a quality image ", false));
    }
  },
});

const videoUpload = multer({
  videoStorage,
});

// ! ROUTE

app.post("/upload/images", imageUpload.single("image"), async (req, res) => {
  console.log(req.file);
  try {
    const uploaded = await Image.create({
      url: req.file.path,
      public_id: req.file.filename,
    });

    res.json({ message: "image uploaded", uploaded });
  } catch (error) {
    res.json({ message: "Error", error });
  }
});

app.get("/getImages", async (req, res) => {
  try {
    const images = await Image.find();

    res.json({ images });
  } catch (error) {
    res.json({ error });
  }
});
app.post("/upload/video", videoUpload.single("video"), async (req, res) => {
  try {
    console.log(res.file);
    const uploaded = await Video.create({
      url: req.file.path,
      public_id: req.file.filename,
    });

    res.json({ message: "Video uploaded", uploaded });
  } catch (error) {
    res.json({ message: "Error", error });
  }
});

app.get("/getVideos", async (req, res) => {
  try {
    const videos = await Video.find();

    res.json({ videos });
  } catch (error) {
    res.json({ error });
  }
});

// ! Start server
app.listen(PORT, console.log("PORT", PORT));